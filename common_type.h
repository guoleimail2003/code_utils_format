#ifndef COMMON_TYPE_H
#define COMMON_TYPE_H

#include <QString>


#define PREFIX_STR_0X "0x"
#define PREFIX_STR_NONE ""
#define DEBUG_PRINT true

#define CHECK_NULL_POINTER(p) ((NULL == p)?true:false)

typedef enum {
    INPUT_FORMAT_START = 0x00,
    INPUT_FORMAT_DECIMAL = 0x10,
    INPUT_FORMAT_HEX = 0x20,
    INPUT_FORMAT_OCT = 0x40,
    INPUT_FORMAT_BINARY = 0x80,
    INPUT_FORMAT_ASCII = 0xF0,
    INPUT_FORMAT_INVALID = INPUT_FORMAT_ASCII + 1,
} INPUT_FORMAT;

typedef enum {
    OUTPUT_FORMAT_START = 0x00,
    OUTPUT_FORMAT_DECIMAL = 0x10,
    OUTPUT_FORMAT_HEX = 0x20,
    OUTPUT_FORMAT_OCT = 0x40,
    OUTPUT_FORMAT_BINARY = 0x80,
    OUTPUT_FORMAT_ASCII = 0xF0,
    OUTPUT_FORMAT_INVALID = OUTPUT_FORMAT_ASCII + 1,
} OUTPUT_FORMAT;

typedef enum {
    MASK_START = 0x00,
    MASK_HEX_2_DECIMAIL = INPUT_FORMAT_HEX << 8 | OUTPUT_FORMAT_DECIMAL,
    MASK_HEX_2_OCT = INPUT_FORMAT_HEX << 8 | OUTPUT_FORMAT_OCT,
    MASK_HEX_2_BINARY = INPUT_FORMAT_HEX << 8 | OUTPUT_FORMAT_BINARY,

    MASK_DECIMAL_2_HEX = INPUT_FORMAT_DECIMAL << 8 | OUTPUT_FORMAT_HEX,
    MASK_DECIMAL_2_OCT = INPUT_FORMAT_DECIMAL << 8 | OUTPUT_FORMAT_OCT,
    MASK_DECIMAL_2_BINARY = INPUT_FORMAT_DECIMAL << 8 | OUTPUT_FORMAT_BINARY,

    MASK_OCT_2_HEX = INPUT_FORMAT_OCT << 8 | OUTPUT_FORMAT_HEX,
    MASK_OCT_2_DECIMAL = INPUT_FORMAT_OCT << 8 | OUTPUT_FORMAT_DECIMAL,
    MASK_OCT_2_BIANRY = INPUT_FORMAT_OCT << 8 | OUTPUT_FORMAT_BINARY,

    MASK_BINARY_2_HEX = INPUT_FORMAT_BINARY << 8 | OUTPUT_FORMAT_HEX,
    MASK_BINARY_2_DECIMAL = INPUT_FORMAT_BINARY << 8 | OUTPUT_FORMAT_DECIMAL,
    MASK_BINARY_2_OCT = INPUT_FORMAT_BINARY << 8 | OUTPUT_FORMAT_OCT,

    MASK_INVALID
} FUNC_MASK;

class CommonType {
public:
    static QString getInputPrefix(QString caller, const int prefix);
    static QString getInputFormat(QString caller, const int input);
    static QString getOutputFormat(QString caller, const int output);
    static QString getFuncMask(QString caller, const int mask);
};

#endif // COMMON_TYPE_H
